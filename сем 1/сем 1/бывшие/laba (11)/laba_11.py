# Талышева ИУ7-15Б
''' Программа 
1. сначала сортирует заданный пользователем массив методом вставок с барьером;
2. затем выводит таблицу замеров времени сортировки списков трёх различных
(заданных пользователем) размерностей и количества перестановок в каждом
из них.
В части 2 для каждой размерности списка исследуются:
● случайный список,
● отсортированный список,
● список, отсортированный в обратном порядке
'''

# Ввод массива
n = None

while n == None:
    try:
        n = int(input('Введите количество элементов массива: '))
    except ValueError:
        print('Ошибка ввода. Нужно ввести целое число. Повторите попытку.')
    else:
        if n <= 0:
            print('Ошибка ввода. Число должно быть положительным. Повторите попытку.')
            n = None

a = [0] * n

for i in range(n):
    a[i] = None
    while a[i] == None:
        try:
            a[i] = int(input('Введите количество элемент массива №{}: '.format(i + 1)))
        except ValueError:
            print('Ошибка ввода. Нужно ввести целое число. Повторите попытку.')

# Функция сортирует массив методом вставок с барьером и считает количество перестановок
def Srt(x):
    count = 0
    m = 1
    while m < len(x):
        x = [0] + x
        m += 1
        k = m
        x[0] = x[k]
        while x[k] < x[k - 1]:
            x[k], x[k - 1] = x[k - 1], x[k]
            count += 1
            k -= 1
        x = x[1:]
    return x, count

# Сортировка и вывод массива
a, c = Srt(a)
print('Отсортированный массив: ', *a)


# Ввод размерностей
n1 = None
while n1 == None:
    try:
        n1, n2, n3 = map(int, input('Введите 3 различные рамерности массивов через пробел: ').split())
    except ValueError:
        print('Ошибка ввода. Нужно ввести 3 целых числа. Повторите попытку.')
    else:
        if n1 <= 0 or n2 <= 0 or n3 <= 0:
            print('Ошибка ввода. Числа должны быть положительными. Повторите попытку.')
            n1 = None

from time import time
# Функция возвращает количество перестановок и время сортировки
def T_K(x):
    age = time()
    x, k = Srt(x)
    t = time() - age 
    return t, k

from random import randint

# Последовательное создание массивов разных размерностей и сохранение 
# времени их сортировки и количества перестановок в новые переменные
# для N1
rand = [0] * n1
sorte = [0] * n1
back = [0] * n1

for i in range(n1):
    rand[i] = randint(-100, 100)
    sorte[i] = i
    back[i] = n1 - i - 1

t1, k1 = T_K(sorte)
t4, k4 = T_K(rand)
t7, k7 = T_K(back)

# для N2
rand = [0] * n2
sorte = [0] * n2
back = [0] * n2

for i in range(n2):
    rand[i] = randint(-100, 100)
    sorte[i] = i
    back[i] = n2 - i - 1

t2, k2 = T_K(sorte)
t5, k5 = T_K(rand)
t8, k8 = T_K(back)

# для N3
rand = [0] * n3
sorte = [0] * n3
back = [0] * n3

for i in range(n3):
    rand[i] = randint(-100, 100)
    sorte[i] = i
    back[i] = n3 - i - 1

t3, k3 = T_K(sorte)
t6, k6 = T_K(rand)
t9, k9 = T_K(back)

# Вывод результатов в виде таблицы
print('-' * 92)
print('|', ' ' * 12, '|', "{:^25}".format("N1"), '|', "{:^25}".format("N2"), '|', "{:^25}".format("N3"), '|', sep = '')
print('-' * 92)
print('|', ' ' * 12, '|', "{:^12}".format("время"), '|', "{:^12}".format("перестановки"), '|', "{:^12}".format("время"), '|',\
      "{:^12}".format("перестановки"), '|', "{:^12}".format("время"), '|', "{:^12}".format("перестановки"), '|', sep = '')
print('-' * 92)
print('|', "{:^12}".format('упорядочен-'), '|', ' ' * 3, "{:^7.4f}".format(t1), ' ' * (9 -len("{:^7.4f}".format(t1))), '|',\
      "{:^12}".format(k1), '|', ' ' * 3, "{:^7.4f}".format(t2), ' ' * (9 - len("{:^7.4f}".format(t2))), '|', "{:^12}".format(k2),\
      '|', ' ' * 3, "{:^7.4f}".format(t3), ' ' * (9 - len("{:^7.4f}".format(t3))), '|', "{:^12}".format(k3), '|', sep = '')
print('|', "{:^12}".format('ный список'), '|', ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|',\
      ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|', sep = '')
print('-' * 92)
print('|', "{:^12}".format('случайный'), '|', ' ' * 3, "{:^7.4f}".format(t4), ' ' * (9 -len("{:^7.4f}".format(t4))), '|',\
      "{:^12}".format(k4), '|', ' ' * 3, "{:^7.4f}".format(t5), ' ' * (9 - len("{:^7.4f}".format(t5))), '|', "{:^12}".format(k5),\
      '|', ' ' * 3, "{:^7.4f}".format(t6), ' ' * (9 - len("{:^7.4f}".format(t6))), '|', "{:^12}".format(k6), '|', sep = '')
print('|', "{:^12}".format('список'), '|', ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|',\
      ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|', sep = '')
print('-' * 92)
print('|', "{:^12}".format('упорядочен-'), '|', ' ' * 3, "{:^7.4f}".format(t7), ' ' * (9 -len("{:^7.4f}".format(t7))), '|',\
      "{:^12}".format(k7), '|', ' ' * 3, "{:^7.4f}".format(t8), ' ' * (9 - len("{:^7.4f}".format(t8))), '|', "{:^12}".format(k8),\
      '|', ' ' * 3, "{:^7.4f}".format(t9), ' ' * (9 - len("{:^7.4f}".format(t9))), '|', "{:^12}".format(k9), '|', sep = '')
print('|', "{:^12}".format('ный в обрат-'), '|', ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|',\
      ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|', sep = '')
print('|', "{:^12}".format('ном порядке'), '|', ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|',\
      ' ' * 12, '|', ' ' * 12, '|', ' ' * 12, '|', sep = '')
print('-' * 92)

    





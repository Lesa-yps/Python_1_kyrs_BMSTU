# Талышева ИУ7-15Б Вариант 18
# Программа по введённым начальному значению, шагу и конечному значению для заданной по варианту функции
# строит таблицу значений этой функции на некотором отрезке и строит её по введенному числу засечек на оси оу график функции, используя цикл while
# Дополнительно определztn количество перемен знака функции

# Вводим начальное значение, конечное значение и шаг
xs, xf, step = map (float, input('Введите через пробел начальное значение, конечное значение и шаг: ').split())

# Проверка на осуществимость
if (xs < xf and step > 0 or xs > xf and step < 0) and step != 0:
    t = xs
    # Рисуем таблицу
    # "Шапка таблицы"
    print ('-' * 53)
    print ('|', ' ' * 10, 't', ' ' * 10, '|', ' ' * 10, 'z', ' ' * 10, '|')
    print ('-' * 53)
    # В переменные z_max и z_min будем сохранять минимальное и максимальное z,
    # которых достигает функция на отрезке
    z_max = z_min = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
    z_save = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
    k = 0
    # Пока конечное значение t больше текущего выполняется цикл
    while xf >= t:
        # Считаем z для текущего t
        z = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205 
        # Выводим следующую строку таблицы
        print ('|', ' ' * 3, f'{t:^15.5g}', ' ' * 3, '|', ' ' * 4,  f'{z:^15.5g}', ' ' * 2, '|')
        # Увеличиваем текущее t на шаг
        t += step
        # Сравниваем знаки предsдущего значения и текущего z
        # Если знаки разные увеличиваем счётчик и обновляем z_save
        if z_save < 0 and z > 0 or z_save > 0 and z < 0:
            k += 1
        z_save = z
        # Сравниваем полученный z с максимальным и минимальным
        if z > z_max:
            z_max = z
        if z < z_min:
            z_min = z
    # Закрываем таблицу
    print ('-' * 53)

    # Вводим число "засечек" ОТ 4-8
    ser = int(input('Введите число "засечек" в диапазоне [4;8]: '))
    while not (4 <= ser <= 8):
        ser = int(input('Число "засечек" не лежит в нужном диапазоне. Введите число "засечек" в диапазоне [4;8]: '))
    sers = ser
    z = z_min
    # Считаем шаг, с которым будут менятся значения "засечек"
    zch = abs((z_max - z_min) / ser)
    print (' ' * 6, end = '')
    # Пока счётчик оставшихся "засечек" > 0 цикл выполняется
    while sers > 0:
        # Если длина числа > 6, то обрезаем её до 6
        if len(str(z)) > 6: zv = float(str(z)[:6])
        else: zv = z
        # Считаем пробелы по сторонам от числа
        paus1 = (50 // ser - len(str(zv))) // 2
        paus2 = 50 // ser - len(str(zv)) - (50 // ser - len(str(zv))) // 2
        # Выводим часть строки с одной "засечкой"
        print (' ' * paus1, zv, ' ' * paus2, end = '')
        # Увеличиваем "засечку" на шаг
        z += zch
        # Уменьшаем на 1 счетчик оставшихся ячеек
        sers -= 1
    print ()
    
    t = xs
    # Вычисляем "вес" единичного отрезка
    ed = (abs(z_max - z_min)) / 60
    # Расстояное от начала строки до 0
    len0 = int(abs((- z_min) / ed))
    # Пока конечное значение t больше текущего выполняется цикл
    while xf >= t:
        # Считаем z для текущего t
        z = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
        # Расстояное от начала строки до z
        lenz = int(abs((z - z_min) / ed))
        # Корректируем длину числа до 6 и преобразуем его в строку длиной = 6
        if len(str(t)) > 6: tv = str(t)[:6]
        else: tv = str(t) + ' ' * (6 - len(str(t)))
        # Выводим строчку графика
        if z_min < 0 < z_max:
            if z == 0 or len0 == lenz:
                print (tv, '|', ' ' * (lenz - 1), '^*^')
            elif abs(lenz - len0) == 1 and z < 0:
                print (tv, '|', ' ' * (lenz), '*|')
            elif z < 0:
                print (tv, '|', ' ' * (lenz), '*', ' ' * ((len0) - (lenz) - 3), '|')
            elif z > 0:
                print (tv, '|', ' ' * (len0), '|', ' ' * ((lenz) - (len0)), '*')
        else:
            print (tv, '|', ' ' * (lenz), '*')
        # Увеличиваем t на шаг
        t += step
    print ('Количество перемен знака функции = ', k)
else:
    print ('Выполнение невозможно')

# Талышева ИУ7-15Б Вариант 18
# Программа по введённым начальному значению, шагу и конечному значению для заданной по варианту функции
# строит таблицу значений этой функции на некотором отрезке и строит её по введенному числу засечек на оси оу график функции, используя цикл while
# Дополнительно определztn количество перемен знака функции

# Вводим начальное значение, конечное значение и шаг
xs, xf, step = map (float, input('Введите через пробел начальное значение, конечное значение и шаг: ').split())

# Проверка на осуществимость
if (xs < xf and step > 0 or xs > xf and step < 0) and step != 0:
    t = xs
    # Рисуем таблицу
    # "Шапка таблицы"
    print ('-' * 53)
    print ('|', ' ' * 10, 't', ' ' * 10, '|', ' ' * 10, 'z', ' ' * 10, '|')
    print ('-' * 53)
    # В переменные z_max и z_min будем сохранять минимальное и максимальное z,
    # которых достигает функция на отрезке
    z_max = z_min = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
    z_save = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
    k = 0
    # Пока конечное значение t больше текущего выполняется цикл
    while (xf >= t and xf > xs) or (xf <= t and xf < xs):
        # Считаем z для текущего t
        z = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205 
        # Выводим следующую строку таблицы
        if len(str(t)) > 7:
            tv = ' ' * 4 + str(t)[:7] + ' ' * 4
        else:
            tv = ' ' * 4 + str(t) + ' ' * (7 - len(str(t))) + ' ' * 4
        if len(str(z)) > 7:
            zv = ' ' * 4 + str(z)[:7] + ' ' * 4
        else:
            zv = ' ' * 4 + str(z) + ' ' * (7 - len(str(z))) + ' ' * 4
        print ('|', ' ' * 3, tv, ' ' * 3, '|', ' ' * 4,  zv, ' ' * 2, '|')
        # Увеличиваем текущее t на шаг
        t += step
        # Сравниваем знаки предsдущего значения и текущего z
        # Если знаки разные увеличиваем счётчик и обновляем z_save
        if z_save < 0 and z > 0 or z_save > 0 and z < 0:
            k += 1
        z_save = z
        # Сравниваем полученный z с максимальным и минимальным
        if z > z_max:
            z_max = z
        if z < z_min:
            z_min = z
    # Закрываем таблицу
    print ('-' * 53)

    # Вводим число "засечек" ОТ 4-8
    ser = int(input('Введите число "засечек" в диапазоне [4;8]: '))
    while not (4 <= ser <= 8):
        ser = int(input('Число "засечек" не лежит в нужном диапазоне. Введите число "засечек" в диапазоне [4;8]: '))
    z_mi = z_min
    chser = (z_max - z_min) / (ser - 1)
    i = ser
    ch = 0
    place = 100 // ser
    print (' ' * 10, end = '', sep = '')
    while i > 0:
        i -= 1
        z_min += ch
        ch += chser
        if i == 0:
            z = ' ' * (place - len(str(z_max)[:7])) + str(z_max)[:7]
        elif i == (ser - 1):
            z = str(z_min)[:7]
            ind = place - len(str(z_min)[:7])
        else:
            z = ' ' * (place - len(str(z_min)[:7])) + str(z_min)[:7]
        print (z, sep = '', end = '')
    print ()
    t = xs
    ed = (z_max - z_mi) / (100 - ind)
    # Пока конечное значение t больше текущего выполняется цикл
    while (xf >= t and xf > xs) or (xf <= t and xf < xs):
        # Считаем z для текущего t
        z = t**7 + 0.456 * t**6 - 0.427 * t**5 + 0.427 * t**4 - 0.482 * t**3 + 0.186 * t**2 - 0.767 * t + 0.205
        if len(str(t)) > 7:
            tv = str(t)[:7]
        else:
            tv = str(t) + ' ' * (7 - len(str(t)))
        leng = int(abs(z - z_mi) / ed) - 1
        # Выводим следующую строку таблицы
        print (tv, ' | ', ' ' * leng, '*', sep = '')
        # Увеличиваем текущее t на шаг
        t += step
    print ('Количество перемен знака функции = ', k)
else:
    print ('Выполнение невозможно')
